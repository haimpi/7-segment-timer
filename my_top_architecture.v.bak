module my_top_architecture (

input clock,

input resetn,

input signal_gen_select,

output wire signal_mux_out

);


//signals(everything that not input or output)
wire [3:0] counter_0;

wire [3:0] counter_1;

wire signal_gen_0;

wire signal_gen_1;

//start design

//counter 0
my_counter my_counter_inst0(

.clock(clock),

.resetn(resetn),

.counter(counter_0)

);

//signal geneartor 0
my_signal_generator my_signal_geneator_inst0(

.clock(clock),

.resetn(resetn),

.counter(counter_0),

.signal_gen(signal_gen_0)

);

//counter 1
my_counter my_counter_inst1(

.clock(clock),

.resetn(resetn),

.counter(counter_1)

);

//signal geneartor 1
my_signal_generator my_signal_geneator_inst1(

.clock(clock),

.resetn(resetn),

.counter(counter_1),

.signal_gen(signal_gen_1)

);

my_mux my_mux_inst(

.clock(clock),

.resetn(resetn),

.select(signal_gen_select),

.a_in(signal_gen_0),

.a_in(signal_gen_1),

.c_out(signal_mux_out)

);
//end design 
 
endmodule